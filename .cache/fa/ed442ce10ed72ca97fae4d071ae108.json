{"id":"node_modules/algoliasearch-helper/src/functions/merge.js","dependencies":[{"name":"/Users/hugo.valla/Desktop/DEMO üèÖ/flagship-demo.js/package.json","includedInParent":true,"mtime":1607612737343},{"name":"/Users/hugo.valla/Desktop/DEMO üèÖ/flagship-demo.js/node_modules/algoliasearch-helper/package.json","includedInParent":true,"mtime":1607596871162}],"generated":{"js":"'use strict';\n\nfunction clone(value) {\n  if (typeof value === 'object' && value !== null) {\n    return _merge(Array.isArray(value) ? [] : {}, value);\n  }\n  return value;\n}\n\nfunction isObjectOrArrayOrFunction(value) {\n  return (\n    typeof value === 'function' ||\n    Array.isArray(value) ||\n    Object.prototype.toString.call(value) === '[object Object]'\n  );\n}\n\nfunction _merge(target, source) {\n  if (target === source) {\n    return target;\n  }\n\n  for (var key in source) {\n    if (!Object.prototype.hasOwnProperty.call(source, key)) {\n      continue;\n    }\n\n    var sourceVal = source[key];\n    var targetVal = target[key];\n\n    if (typeof targetVal !== 'undefined' && typeof sourceVal === 'undefined') {\n      continue;\n    }\n\n    if (isObjectOrArrayOrFunction(targetVal) && isObjectOrArrayOrFunction(sourceVal)) {\n      target[key] = _merge(targetVal, sourceVal);\n    } else {\n      target[key] = clone(sourceVal);\n    }\n  }\n  return target;\n}\n\n/**\n * This method is like Object.assign, but recursively merges own and inherited\n * enumerable keyed properties of source objects into the destination object.\n *\n * NOTE: this behaves like lodash/merge, but:\n * - does mutate functions if they are a source\n * - treats non-plain objects as plain\n * - does not work for circular objects\n * - treats sparse arrays as sparse\n * - does not convert Array-like objects (Arguments, NodeLists, etc.) to arrays\n *\n * @param {Object} object The destination object.\n * @param {...Object} [sources] The source objects.\n * @returns {Object} Returns `object`.\n */\n\nfunction merge(target) {\n  if (!isObjectOrArrayOrFunction(target)) {\n    target = {};\n  }\n\n  for (var i = 1, l = arguments.length; i < l; i++) {\n    var source = arguments[i];\n\n    if (isObjectOrArrayOrFunction(source)) {\n      _merge(target, source);\n    }\n  }\n  return target;\n}\n\nmodule.exports = merge;\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/algoliasearch-helper/src/functions/merge.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/algoliasearch-helper/src/functions/merge.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/algoliasearch-helper/src/functions/merge.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/algoliasearch-helper/src/functions/merge.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/algoliasearch-helper/src/functions/merge.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/algoliasearch-helper/src/functions/merge.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/algoliasearch-helper/src/functions/merge.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/algoliasearch-helper/src/functions/merge.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/algoliasearch-helper/src/functions/merge.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/algoliasearch-helper/src/functions/merge.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/algoliasearch-helper/src/functions/merge.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/algoliasearch-helper/src/functions/merge.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/algoliasearch-helper/src/functions/merge.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/algoliasearch-helper/src/functions/merge.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/algoliasearch-helper/src/functions/merge.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/algoliasearch-helper/src/functions/merge.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/algoliasearch-helper/src/functions/merge.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/algoliasearch-helper/src/functions/merge.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/algoliasearch-helper/src/functions/merge.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/algoliasearch-helper/src/functions/merge.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/algoliasearch-helper/src/functions/merge.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/algoliasearch-helper/src/functions/merge.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/algoliasearch-helper/src/functions/merge.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/algoliasearch-helper/src/functions/merge.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/algoliasearch-helper/src/functions/merge.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/algoliasearch-helper/src/functions/merge.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/algoliasearch-helper/src/functions/merge.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/algoliasearch-helper/src/functions/merge.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/algoliasearch-helper/src/functions/merge.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/algoliasearch-helper/src/functions/merge.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/algoliasearch-helper/src/functions/merge.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/algoliasearch-helper/src/functions/merge.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/algoliasearch-helper/src/functions/merge.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/algoliasearch-helper/src/functions/merge.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/algoliasearch-helper/src/functions/merge.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/algoliasearch-helper/src/functions/merge.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/algoliasearch-helper/src/functions/merge.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/algoliasearch-helper/src/functions/merge.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/algoliasearch-helper/src/functions/merge.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/algoliasearch-helper/src/functions/merge.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/algoliasearch-helper/src/functions/merge.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/algoliasearch-helper/src/functions/merge.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/algoliasearch-helper/src/functions/merge.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/algoliasearch-helper/src/functions/merge.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/algoliasearch-helper/src/functions/merge.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/algoliasearch-helper/src/functions/merge.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/algoliasearch-helper/src/functions/merge.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/algoliasearch-helper/src/functions/merge.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/algoliasearch-helper/src/functions/merge.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/algoliasearch-helper/src/functions/merge.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/algoliasearch-helper/src/functions/merge.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/algoliasearch-helper/src/functions/merge.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/algoliasearch-helper/src/functions/merge.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/algoliasearch-helper/src/functions/merge.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/algoliasearch-helper/src/functions/merge.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/algoliasearch-helper/src/functions/merge.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/algoliasearch-helper/src/functions/merge.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/algoliasearch-helper/src/functions/merge.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/algoliasearch-helper/src/functions/merge.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/algoliasearch-helper/src/functions/merge.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/algoliasearch-helper/src/functions/merge.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/algoliasearch-helper/src/functions/merge.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/algoliasearch-helper/src/functions/merge.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/algoliasearch-helper/src/functions/merge.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/algoliasearch-helper/src/functions/merge.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/algoliasearch-helper/src/functions/merge.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/algoliasearch-helper/src/functions/merge.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/algoliasearch-helper/src/functions/merge.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/algoliasearch-helper/src/functions/merge.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/algoliasearch-helper/src/functions/merge.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/algoliasearch-helper/src/functions/merge.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/algoliasearch-helper/src/functions/merge.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/algoliasearch-helper/src/functions/merge.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/algoliasearch-helper/src/functions/merge.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/algoliasearch-helper/src/functions/merge.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/algoliasearch-helper/src/functions/merge.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}}],"sources":{"node_modules/algoliasearch-helper/src/functions/merge.js":"'use strict';\n\nfunction clone(value) {\n  if (typeof value === 'object' && value !== null) {\n    return _merge(Array.isArray(value) ? [] : {}, value);\n  }\n  return value;\n}\n\nfunction isObjectOrArrayOrFunction(value) {\n  return (\n    typeof value === 'function' ||\n    Array.isArray(value) ||\n    Object.prototype.toString.call(value) === '[object Object]'\n  );\n}\n\nfunction _merge(target, source) {\n  if (target === source) {\n    return target;\n  }\n\n  for (var key in source) {\n    if (!Object.prototype.hasOwnProperty.call(source, key)) {\n      continue;\n    }\n\n    var sourceVal = source[key];\n    var targetVal = target[key];\n\n    if (typeof targetVal !== 'undefined' && typeof sourceVal === 'undefined') {\n      continue;\n    }\n\n    if (isObjectOrArrayOrFunction(targetVal) && isObjectOrArrayOrFunction(sourceVal)) {\n      target[key] = _merge(targetVal, sourceVal);\n    } else {\n      target[key] = clone(sourceVal);\n    }\n  }\n  return target;\n}\n\n/**\n * This method is like Object.assign, but recursively merges own and inherited\n * enumerable keyed properties of source objects into the destination object.\n *\n * NOTE: this behaves like lodash/merge, but:\n * - does mutate functions if they are a source\n * - treats non-plain objects as plain\n * - does not work for circular objects\n * - treats sparse arrays as sparse\n * - does not convert Array-like objects (Arguments, NodeLists, etc.) to arrays\n *\n * @param {Object} object The destination object.\n * @param {...Object} [sources] The source objects.\n * @returns {Object} Returns `object`.\n */\n\nfunction merge(target) {\n  if (!isObjectOrArrayOrFunction(target)) {\n    target = {};\n  }\n\n  for (var i = 1, l = arguments.length; i < l; i++) {\n    var source = arguments[i];\n\n    if (isObjectOrArrayOrFunction(source)) {\n      _merge(target, source);\n    }\n  }\n  return target;\n}\n\nmodule.exports = merge;\n"},"lineCount":76}},"error":null,"hash":"befe8e2eeaae94e656b6a01f8a7f1cd5","cacheData":{"env":{}}}