{"id":"node_modules/algoliasearch-helper/src/requestBuilder.js","dependencies":[{"name":"/Users/hugo.valla/Desktop/DEMO 🏅/flagship-demo.js/package.json","includedInParent":true,"mtime":1607612607458},{"name":"/Users/hugo.valla/Desktop/DEMO 🏅/flagship-demo.js/node_modules/algoliasearch-helper/package.json","includedInParent":true,"mtime":1607596871162},{"name":"./functions/merge","loc":{"line":3,"column":20},"parent":"/Users/hugo.valla/Desktop/DEMO 🏅/flagship-demo.js/node_modules/algoliasearch-helper/src/requestBuilder.js","resolved":"/Users/hugo.valla/Desktop/DEMO 🏅/flagship-demo.js/node_modules/algoliasearch-helper/src/functions/merge.js"}],"generated":{"js":"'use strict';\n\nvar merge = require('./functions/merge');\n\nvar requestBuilder = {\n  /**\n   * Get all the queries to send to the client, those queries can used directly\n   * with the Algolia client.\n   * @private\n   * @return {object[]} The queries\n   */\n  _getQueries: function getQueries(index, state) {\n    var queries = [];\n\n    // One query for the hits\n    queries.push({\n      indexName: index,\n      params: requestBuilder._getHitsSearchParams(state)\n    });\n\n    // One for each disjunctive facets\n    state.getRefinedDisjunctiveFacets().forEach(function(refinedFacet) {\n      queries.push({\n        indexName: index,\n        params: requestBuilder._getDisjunctiveFacetSearchParams(state, refinedFacet)\n      });\n    });\n\n    // maybe more to get the root level of hierarchical facets when activated\n    state.getRefinedHierarchicalFacets().forEach(function(refinedFacet) {\n      var hierarchicalFacet = state.getHierarchicalFacetByName(refinedFacet);\n\n      var currentRefinement = state.getHierarchicalRefinement(refinedFacet);\n      // if we are deeper than level 0 (starting from `beer > IPA`)\n      // we want to get the root values\n      var separator = state._getHierarchicalFacetSeparator(hierarchicalFacet);\n      if (currentRefinement.length > 0 && currentRefinement[0].split(separator).length > 1) {\n        queries.push({\n          indexName: index,\n          params: requestBuilder._getDisjunctiveFacetSearchParams(state, refinedFacet, true)\n        });\n      }\n    });\n\n    return queries;\n  },\n\n  /**\n   * Build search parameters used to fetch hits\n   * @private\n   * @return {object.<string, any>}\n   */\n  _getHitsSearchParams: function(state) {\n    var facets = state.facets\n      .concat(state.disjunctiveFacets)\n      .concat(requestBuilder._getHitsHierarchicalFacetsAttributes(state));\n\n\n    var facetFilters = requestBuilder._getFacetFilters(state);\n    var numericFilters = requestBuilder._getNumericFilters(state);\n    var tagFilters = requestBuilder._getTagFilters(state);\n    var additionalParams = {\n      facets: facets,\n      tagFilters: tagFilters\n    };\n\n    if (facetFilters.length > 0) {\n      additionalParams.facetFilters = facetFilters;\n    }\n\n    if (numericFilters.length > 0) {\n      additionalParams.numericFilters = numericFilters;\n    }\n\n    return merge({}, state.getQueryParams(), additionalParams);\n  },\n\n  /**\n   * Build search parameters used to fetch a disjunctive facet\n   * @private\n   * @param  {string} facet the associated facet name\n   * @param  {boolean} hierarchicalRootLevel ?? FIXME\n   * @return {object}\n   */\n  _getDisjunctiveFacetSearchParams: function(state, facet, hierarchicalRootLevel) {\n    var facetFilters = requestBuilder._getFacetFilters(state, facet, hierarchicalRootLevel);\n    var numericFilters = requestBuilder._getNumericFilters(state, facet);\n    var tagFilters = requestBuilder._getTagFilters(state);\n    var additionalParams = {\n      hitsPerPage: 1,\n      page: 0,\n      attributesToRetrieve: [],\n      attributesToHighlight: [],\n      attributesToSnippet: [],\n      tagFilters: tagFilters,\n      analytics: false,\n      clickAnalytics: false\n    };\n\n    var hierarchicalFacet = state.getHierarchicalFacetByName(facet);\n\n    if (hierarchicalFacet) {\n      additionalParams.facets = requestBuilder._getDisjunctiveHierarchicalFacetAttribute(\n        state,\n        hierarchicalFacet,\n        hierarchicalRootLevel\n      );\n    } else {\n      additionalParams.facets = facet;\n    }\n\n    if (numericFilters.length > 0) {\n      additionalParams.numericFilters = numericFilters;\n    }\n\n    if (facetFilters.length > 0) {\n      additionalParams.facetFilters = facetFilters;\n    }\n\n    return merge({}, state.getQueryParams(), additionalParams);\n  },\n\n  /**\n   * Return the numeric filters in an algolia request fashion\n   * @private\n   * @param {string} [facetName] the name of the attribute for which the filters should be excluded\n   * @return {string[]} the numeric filters in the algolia format\n   */\n  _getNumericFilters: function(state, facetName) {\n    if (state.numericFilters) {\n      return state.numericFilters;\n    }\n\n    var numericFilters = [];\n\n    Object.keys(state.numericRefinements).forEach(function(attribute) {\n      var operators = state.numericRefinements[attribute] || {};\n      Object.keys(operators).forEach(function(operator) {\n        var values = operators[operator] || [];\n        if (facetName !== attribute) {\n          values.forEach(function(value) {\n            if (Array.isArray(value)) {\n              var vs = value.map(function(v) {\n                return attribute + operator + v;\n              });\n              numericFilters.push(vs);\n            } else {\n              numericFilters.push(attribute + operator + value);\n            }\n          });\n        }\n      });\n    });\n\n    return numericFilters;\n  },\n\n  /**\n   * Return the tags filters depending\n   * @private\n   * @return {string}\n   */\n  _getTagFilters: function(state) {\n    if (state.tagFilters) {\n      return state.tagFilters;\n    }\n\n    return state.tagRefinements.join(',');\n  },\n\n\n  /**\n   * Build facetFilters parameter based on current refinements. The array returned\n   * contains strings representing the facet filters in the algolia format.\n   * @private\n   * @param  {string} [facet] if set, the current disjunctive facet\n   * @return {array.<string>}\n   */\n  _getFacetFilters: function(state, facet, hierarchicalRootLevel) {\n    var facetFilters = [];\n\n    var facetsRefinements = state.facetsRefinements || {};\n    Object.keys(facetsRefinements).forEach(function(facetName) {\n      var facetValues = facetsRefinements[facetName] || [];\n      facetValues.forEach(function(facetValue) {\n        facetFilters.push(facetName + ':' + facetValue);\n      });\n    });\n\n    var facetsExcludes = state.facetsExcludes || {};\n    Object.keys(facetsExcludes).forEach(function(facetName) {\n      var facetValues = facetsExcludes[facetName] || [];\n      facetValues.forEach(function(facetValue) {\n        facetFilters.push(facetName + ':-' + facetValue);\n      });\n    });\n\n    var disjunctiveFacetsRefinements = state.disjunctiveFacetsRefinements || {};\n    Object.keys(disjunctiveFacetsRefinements).forEach(function(facetName) {\n      var facetValues = disjunctiveFacetsRefinements[facetName] || [];\n      if (facetName === facet || !facetValues || facetValues.length === 0) {\n        return;\n      }\n      var orFilters = [];\n\n      facetValues.forEach(function(facetValue) {\n        orFilters.push(facetName + ':' + facetValue);\n      });\n\n      facetFilters.push(orFilters);\n    });\n\n    var hierarchicalFacetsRefinements = state.hierarchicalFacetsRefinements || {};\n    Object.keys(hierarchicalFacetsRefinements).forEach(function(facetName) {\n      var facetValues = hierarchicalFacetsRefinements[facetName] || [];\n      var facetValue = facetValues[0];\n\n      if (facetValue === undefined) {\n        return;\n      }\n\n      var hierarchicalFacet = state.getHierarchicalFacetByName(facetName);\n      var separator = state._getHierarchicalFacetSeparator(hierarchicalFacet);\n      var rootPath = state._getHierarchicalRootPath(hierarchicalFacet);\n      var attributeToRefine;\n      var attributesIndex;\n\n      // we ask for parent facet values only when the `facet` is the current hierarchical facet\n      if (facet === facetName) {\n        // if we are at the root level already, no need to ask for facet values, we get them from\n        // the hits query\n        if (facetValue.indexOf(separator) === -1 || (!rootPath && hierarchicalRootLevel === true) ||\n          (rootPath && rootPath.split(separator).length === facetValue.split(separator).length)) {\n          return;\n        }\n\n        if (!rootPath) {\n          attributesIndex = facetValue.split(separator).length - 2;\n          facetValue = facetValue.slice(0, facetValue.lastIndexOf(separator));\n        } else {\n          attributesIndex = rootPath.split(separator).length - 1;\n          facetValue = rootPath;\n        }\n\n        attributeToRefine = hierarchicalFacet.attributes[attributesIndex];\n      } else {\n        attributesIndex = facetValue.split(separator).length - 1;\n\n        attributeToRefine = hierarchicalFacet.attributes[attributesIndex];\n      }\n\n      if (attributeToRefine) {\n        facetFilters.push([attributeToRefine + ':' + facetValue]);\n      }\n    });\n\n    return facetFilters;\n  },\n\n  _getHitsHierarchicalFacetsAttributes: function(state) {\n    var out = [];\n\n    return state.hierarchicalFacets.reduce(\n      // ask for as much levels as there's hierarchical refinements\n      function getHitsAttributesForHierarchicalFacet(allAttributes, hierarchicalFacet) {\n        var hierarchicalRefinement = state.getHierarchicalRefinement(hierarchicalFacet.name)[0];\n\n        // if no refinement, ask for root level\n        if (!hierarchicalRefinement) {\n          allAttributes.push(hierarchicalFacet.attributes[0]);\n          return allAttributes;\n        }\n\n        var separator = state._getHierarchicalFacetSeparator(hierarchicalFacet);\n        var level = hierarchicalRefinement.split(separator).length;\n        var newAttributes = hierarchicalFacet.attributes.slice(0, level + 1);\n\n        return allAttributes.concat(newAttributes);\n      }, out);\n  },\n\n  _getDisjunctiveHierarchicalFacetAttribute: function(state, hierarchicalFacet, rootLevel) {\n    var separator = state._getHierarchicalFacetSeparator(hierarchicalFacet);\n    if (rootLevel === true) {\n      var rootPath = state._getHierarchicalRootPath(hierarchicalFacet);\n      var attributeIndex = 0;\n\n      if (rootPath) {\n        attributeIndex = rootPath.split(separator).length;\n      }\n      return [hierarchicalFacet.attributes[attributeIndex]];\n    }\n\n    var hierarchicalRefinement = state.getHierarchicalRefinement(hierarchicalFacet.name)[0] || '';\n    // if refinement is 'beers > IPA > Flying dog',\n    // then we want `facets: ['beers > IPA']` as disjunctive facet (parent level values)\n\n    var parentLevel = hierarchicalRefinement.split(separator).length - 1;\n    return hierarchicalFacet.attributes.slice(0, parentLevel + 1);\n  },\n\n  getSearchForFacetQuery: function(facetName, query, maxFacetHits, state) {\n    var stateForSearchForFacetValues = state.isDisjunctiveFacet(facetName) ?\n      state.clearRefinements(facetName) :\n      state;\n    var searchForFacetSearchParameters = {\n      facetQuery: query,\n      facetName: facetName\n    };\n    if (typeof maxFacetHits === 'number') {\n      searchForFacetSearchParameters.maxFacetHits = maxFacetHits;\n    }\n    return merge(\n      {},\n      requestBuilder._getHitsSearchParams(stateForSearchForFacetValues),\n      searchForFacetSearchParameters\n    );\n  }\n};\n\nmodule.exports = requestBuilder;\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":161,"column":0},"generated":{"line":161,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":162,"column":0},"generated":{"line":162,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":163,"column":0},"generated":{"line":163,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":164,"column":0},"generated":{"line":164,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":165,"column":0},"generated":{"line":165,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":166,"column":0},"generated":{"line":166,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":167,"column":0},"generated":{"line":167,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":168,"column":0},"generated":{"line":168,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":169,"column":0},"generated":{"line":169,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":170,"column":0},"generated":{"line":170,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":171,"column":0},"generated":{"line":171,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":172,"column":0},"generated":{"line":172,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":173,"column":0},"generated":{"line":173,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":174,"column":0},"generated":{"line":174,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":175,"column":0},"generated":{"line":175,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":176,"column":0},"generated":{"line":176,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":177,"column":0},"generated":{"line":177,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":178,"column":0},"generated":{"line":178,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":179,"column":0},"generated":{"line":179,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":180,"column":0},"generated":{"line":180,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":181,"column":0},"generated":{"line":181,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":182,"column":0},"generated":{"line":182,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":183,"column":0},"generated":{"line":183,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":184,"column":0},"generated":{"line":184,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":185,"column":0},"generated":{"line":185,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":186,"column":0},"generated":{"line":186,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":187,"column":0},"generated":{"line":187,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":188,"column":0},"generated":{"line":188,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":189,"column":0},"generated":{"line":189,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":190,"column":0},"generated":{"line":190,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":191,"column":0},"generated":{"line":191,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":192,"column":0},"generated":{"line":192,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":193,"column":0},"generated":{"line":193,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":194,"column":0},"generated":{"line":194,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":195,"column":0},"generated":{"line":195,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":196,"column":0},"generated":{"line":196,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":197,"column":0},"generated":{"line":197,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":198,"column":0},"generated":{"line":198,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":199,"column":0},"generated":{"line":199,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":200,"column":0},"generated":{"line":200,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":201,"column":0},"generated":{"line":201,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":202,"column":0},"generated":{"line":202,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":203,"column":0},"generated":{"line":203,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":204,"column":0},"generated":{"line":204,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":205,"column":0},"generated":{"line":205,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":206,"column":0},"generated":{"line":206,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":207,"column":0},"generated":{"line":207,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":208,"column":0},"generated":{"line":208,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":209,"column":0},"generated":{"line":209,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":210,"column":0},"generated":{"line":210,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":211,"column":0},"generated":{"line":211,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":212,"column":0},"generated":{"line":212,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":213,"column":0},"generated":{"line":213,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":214,"column":0},"generated":{"line":214,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":215,"column":0},"generated":{"line":215,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":216,"column":0},"generated":{"line":216,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":217,"column":0},"generated":{"line":217,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":218,"column":0},"generated":{"line":218,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":219,"column":0},"generated":{"line":219,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":220,"column":0},"generated":{"line":220,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":221,"column":0},"generated":{"line":221,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":222,"column":0},"generated":{"line":222,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":223,"column":0},"generated":{"line":223,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":224,"column":0},"generated":{"line":224,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":225,"column":0},"generated":{"line":225,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":226,"column":0},"generated":{"line":226,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":227,"column":0},"generated":{"line":227,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":228,"column":0},"generated":{"line":228,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":229,"column":0},"generated":{"line":229,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":230,"column":0},"generated":{"line":230,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":231,"column":0},"generated":{"line":231,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":232,"column":0},"generated":{"line":232,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":233,"column":0},"generated":{"line":233,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":234,"column":0},"generated":{"line":234,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":235,"column":0},"generated":{"line":235,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":236,"column":0},"generated":{"line":236,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":237,"column":0},"generated":{"line":237,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":238,"column":0},"generated":{"line":238,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":239,"column":0},"generated":{"line":239,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":240,"column":0},"generated":{"line":240,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":241,"column":0},"generated":{"line":241,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":242,"column":0},"generated":{"line":242,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":243,"column":0},"generated":{"line":243,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":244,"column":0},"generated":{"line":244,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":245,"column":0},"generated":{"line":245,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":246,"column":0},"generated":{"line":246,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":247,"column":0},"generated":{"line":247,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":248,"column":0},"generated":{"line":248,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":249,"column":0},"generated":{"line":249,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":250,"column":0},"generated":{"line":250,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":251,"column":0},"generated":{"line":251,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":252,"column":0},"generated":{"line":252,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":253,"column":0},"generated":{"line":253,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":254,"column":0},"generated":{"line":254,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":255,"column":0},"generated":{"line":255,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":256,"column":0},"generated":{"line":256,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":257,"column":0},"generated":{"line":257,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":258,"column":0},"generated":{"line":258,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":259,"column":0},"generated":{"line":259,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":260,"column":0},"generated":{"line":260,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":261,"column":0},"generated":{"line":261,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":262,"column":0},"generated":{"line":262,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":263,"column":0},"generated":{"line":263,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":264,"column":0},"generated":{"line":264,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":265,"column":0},"generated":{"line":265,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":266,"column":0},"generated":{"line":266,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":267,"column":0},"generated":{"line":267,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":268,"column":0},"generated":{"line":268,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":269,"column":0},"generated":{"line":269,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":270,"column":0},"generated":{"line":270,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":271,"column":0},"generated":{"line":271,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":272,"column":0},"generated":{"line":272,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":273,"column":0},"generated":{"line":273,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":274,"column":0},"generated":{"line":274,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":275,"column":0},"generated":{"line":275,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":276,"column":0},"generated":{"line":276,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":277,"column":0},"generated":{"line":277,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":278,"column":0},"generated":{"line":278,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":279,"column":0},"generated":{"line":279,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":280,"column":0},"generated":{"line":280,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":281,"column":0},"generated":{"line":281,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":282,"column":0},"generated":{"line":282,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":283,"column":0},"generated":{"line":283,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":284,"column":0},"generated":{"line":284,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":285,"column":0},"generated":{"line":285,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":286,"column":0},"generated":{"line":286,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":287,"column":0},"generated":{"line":287,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":288,"column":0},"generated":{"line":288,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":289,"column":0},"generated":{"line":289,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":290,"column":0},"generated":{"line":290,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":291,"column":0},"generated":{"line":291,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":292,"column":0},"generated":{"line":292,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":293,"column":0},"generated":{"line":293,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":294,"column":0},"generated":{"line":294,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":295,"column":0},"generated":{"line":295,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":296,"column":0},"generated":{"line":296,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":297,"column":0},"generated":{"line":297,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":298,"column":0},"generated":{"line":298,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":299,"column":0},"generated":{"line":299,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":300,"column":0},"generated":{"line":300,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":301,"column":0},"generated":{"line":301,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":302,"column":0},"generated":{"line":302,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":303,"column":0},"generated":{"line":303,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":304,"column":0},"generated":{"line":304,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":305,"column":0},"generated":{"line":305,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":306,"column":0},"generated":{"line":306,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":307,"column":0},"generated":{"line":307,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":308,"column":0},"generated":{"line":308,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":309,"column":0},"generated":{"line":309,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":310,"column":0},"generated":{"line":310,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":311,"column":0},"generated":{"line":311,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":312,"column":0},"generated":{"line":312,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":313,"column":0},"generated":{"line":313,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":314,"column":0},"generated":{"line":314,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":315,"column":0},"generated":{"line":315,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":316,"column":0},"generated":{"line":316,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":317,"column":0},"generated":{"line":317,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":318,"column":0},"generated":{"line":318,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":319,"column":0},"generated":{"line":319,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":320,"column":0},"generated":{"line":320,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":321,"column":0},"generated":{"line":321,"column":0}},{"source":"node_modules/algoliasearch-helper/src/requestBuilder.js","original":{"line":322,"column":0},"generated":{"line":322,"column":0}}],"sources":{"node_modules/algoliasearch-helper/src/requestBuilder.js":"'use strict';\n\nvar merge = require('./functions/merge');\n\nvar requestBuilder = {\n  /**\n   * Get all the queries to send to the client, those queries can used directly\n   * with the Algolia client.\n   * @private\n   * @return {object[]} The queries\n   */\n  _getQueries: function getQueries(index, state) {\n    var queries = [];\n\n    // One query for the hits\n    queries.push({\n      indexName: index,\n      params: requestBuilder._getHitsSearchParams(state)\n    });\n\n    // One for each disjunctive facets\n    state.getRefinedDisjunctiveFacets().forEach(function(refinedFacet) {\n      queries.push({\n        indexName: index,\n        params: requestBuilder._getDisjunctiveFacetSearchParams(state, refinedFacet)\n      });\n    });\n\n    // maybe more to get the root level of hierarchical facets when activated\n    state.getRefinedHierarchicalFacets().forEach(function(refinedFacet) {\n      var hierarchicalFacet = state.getHierarchicalFacetByName(refinedFacet);\n\n      var currentRefinement = state.getHierarchicalRefinement(refinedFacet);\n      // if we are deeper than level 0 (starting from `beer > IPA`)\n      // we want to get the root values\n      var separator = state._getHierarchicalFacetSeparator(hierarchicalFacet);\n      if (currentRefinement.length > 0 && currentRefinement[0].split(separator).length > 1) {\n        queries.push({\n          indexName: index,\n          params: requestBuilder._getDisjunctiveFacetSearchParams(state, refinedFacet, true)\n        });\n      }\n    });\n\n    return queries;\n  },\n\n  /**\n   * Build search parameters used to fetch hits\n   * @private\n   * @return {object.<string, any>}\n   */\n  _getHitsSearchParams: function(state) {\n    var facets = state.facets\n      .concat(state.disjunctiveFacets)\n      .concat(requestBuilder._getHitsHierarchicalFacetsAttributes(state));\n\n\n    var facetFilters = requestBuilder._getFacetFilters(state);\n    var numericFilters = requestBuilder._getNumericFilters(state);\n    var tagFilters = requestBuilder._getTagFilters(state);\n    var additionalParams = {\n      facets: facets,\n      tagFilters: tagFilters\n    };\n\n    if (facetFilters.length > 0) {\n      additionalParams.facetFilters = facetFilters;\n    }\n\n    if (numericFilters.length > 0) {\n      additionalParams.numericFilters = numericFilters;\n    }\n\n    return merge({}, state.getQueryParams(), additionalParams);\n  },\n\n  /**\n   * Build search parameters used to fetch a disjunctive facet\n   * @private\n   * @param  {string} facet the associated facet name\n   * @param  {boolean} hierarchicalRootLevel ?? FIXME\n   * @return {object}\n   */\n  _getDisjunctiveFacetSearchParams: function(state, facet, hierarchicalRootLevel) {\n    var facetFilters = requestBuilder._getFacetFilters(state, facet, hierarchicalRootLevel);\n    var numericFilters = requestBuilder._getNumericFilters(state, facet);\n    var tagFilters = requestBuilder._getTagFilters(state);\n    var additionalParams = {\n      hitsPerPage: 1,\n      page: 0,\n      attributesToRetrieve: [],\n      attributesToHighlight: [],\n      attributesToSnippet: [],\n      tagFilters: tagFilters,\n      analytics: false,\n      clickAnalytics: false\n    };\n\n    var hierarchicalFacet = state.getHierarchicalFacetByName(facet);\n\n    if (hierarchicalFacet) {\n      additionalParams.facets = requestBuilder._getDisjunctiveHierarchicalFacetAttribute(\n        state,\n        hierarchicalFacet,\n        hierarchicalRootLevel\n      );\n    } else {\n      additionalParams.facets = facet;\n    }\n\n    if (numericFilters.length > 0) {\n      additionalParams.numericFilters = numericFilters;\n    }\n\n    if (facetFilters.length > 0) {\n      additionalParams.facetFilters = facetFilters;\n    }\n\n    return merge({}, state.getQueryParams(), additionalParams);\n  },\n\n  /**\n   * Return the numeric filters in an algolia request fashion\n   * @private\n   * @param {string} [facetName] the name of the attribute for which the filters should be excluded\n   * @return {string[]} the numeric filters in the algolia format\n   */\n  _getNumericFilters: function(state, facetName) {\n    if (state.numericFilters) {\n      return state.numericFilters;\n    }\n\n    var numericFilters = [];\n\n    Object.keys(state.numericRefinements).forEach(function(attribute) {\n      var operators = state.numericRefinements[attribute] || {};\n      Object.keys(operators).forEach(function(operator) {\n        var values = operators[operator] || [];\n        if (facetName !== attribute) {\n          values.forEach(function(value) {\n            if (Array.isArray(value)) {\n              var vs = value.map(function(v) {\n                return attribute + operator + v;\n              });\n              numericFilters.push(vs);\n            } else {\n              numericFilters.push(attribute + operator + value);\n            }\n          });\n        }\n      });\n    });\n\n    return numericFilters;\n  },\n\n  /**\n   * Return the tags filters depending\n   * @private\n   * @return {string}\n   */\n  _getTagFilters: function(state) {\n    if (state.tagFilters) {\n      return state.tagFilters;\n    }\n\n    return state.tagRefinements.join(',');\n  },\n\n\n  /**\n   * Build facetFilters parameter based on current refinements. The array returned\n   * contains strings representing the facet filters in the algolia format.\n   * @private\n   * @param  {string} [facet] if set, the current disjunctive facet\n   * @return {array.<string>}\n   */\n  _getFacetFilters: function(state, facet, hierarchicalRootLevel) {\n    var facetFilters = [];\n\n    var facetsRefinements = state.facetsRefinements || {};\n    Object.keys(facetsRefinements).forEach(function(facetName) {\n      var facetValues = facetsRefinements[facetName] || [];\n      facetValues.forEach(function(facetValue) {\n        facetFilters.push(facetName + ':' + facetValue);\n      });\n    });\n\n    var facetsExcludes = state.facetsExcludes || {};\n    Object.keys(facetsExcludes).forEach(function(facetName) {\n      var facetValues = facetsExcludes[facetName] || [];\n      facetValues.forEach(function(facetValue) {\n        facetFilters.push(facetName + ':-' + facetValue);\n      });\n    });\n\n    var disjunctiveFacetsRefinements = state.disjunctiveFacetsRefinements || {};\n    Object.keys(disjunctiveFacetsRefinements).forEach(function(facetName) {\n      var facetValues = disjunctiveFacetsRefinements[facetName] || [];\n      if (facetName === facet || !facetValues || facetValues.length === 0) {\n        return;\n      }\n      var orFilters = [];\n\n      facetValues.forEach(function(facetValue) {\n        orFilters.push(facetName + ':' + facetValue);\n      });\n\n      facetFilters.push(orFilters);\n    });\n\n    var hierarchicalFacetsRefinements = state.hierarchicalFacetsRefinements || {};\n    Object.keys(hierarchicalFacetsRefinements).forEach(function(facetName) {\n      var facetValues = hierarchicalFacetsRefinements[facetName] || [];\n      var facetValue = facetValues[0];\n\n      if (facetValue === undefined) {\n        return;\n      }\n\n      var hierarchicalFacet = state.getHierarchicalFacetByName(facetName);\n      var separator = state._getHierarchicalFacetSeparator(hierarchicalFacet);\n      var rootPath = state._getHierarchicalRootPath(hierarchicalFacet);\n      var attributeToRefine;\n      var attributesIndex;\n\n      // we ask for parent facet values only when the `facet` is the current hierarchical facet\n      if (facet === facetName) {\n        // if we are at the root level already, no need to ask for facet values, we get them from\n        // the hits query\n        if (facetValue.indexOf(separator) === -1 || (!rootPath && hierarchicalRootLevel === true) ||\n          (rootPath && rootPath.split(separator).length === facetValue.split(separator).length)) {\n          return;\n        }\n\n        if (!rootPath) {\n          attributesIndex = facetValue.split(separator).length - 2;\n          facetValue = facetValue.slice(0, facetValue.lastIndexOf(separator));\n        } else {\n          attributesIndex = rootPath.split(separator).length - 1;\n          facetValue = rootPath;\n        }\n\n        attributeToRefine = hierarchicalFacet.attributes[attributesIndex];\n      } else {\n        attributesIndex = facetValue.split(separator).length - 1;\n\n        attributeToRefine = hierarchicalFacet.attributes[attributesIndex];\n      }\n\n      if (attributeToRefine) {\n        facetFilters.push([attributeToRefine + ':' + facetValue]);\n      }\n    });\n\n    return facetFilters;\n  },\n\n  _getHitsHierarchicalFacetsAttributes: function(state) {\n    var out = [];\n\n    return state.hierarchicalFacets.reduce(\n      // ask for as much levels as there's hierarchical refinements\n      function getHitsAttributesForHierarchicalFacet(allAttributes, hierarchicalFacet) {\n        var hierarchicalRefinement = state.getHierarchicalRefinement(hierarchicalFacet.name)[0];\n\n        // if no refinement, ask for root level\n        if (!hierarchicalRefinement) {\n          allAttributes.push(hierarchicalFacet.attributes[0]);\n          return allAttributes;\n        }\n\n        var separator = state._getHierarchicalFacetSeparator(hierarchicalFacet);\n        var level = hierarchicalRefinement.split(separator).length;\n        var newAttributes = hierarchicalFacet.attributes.slice(0, level + 1);\n\n        return allAttributes.concat(newAttributes);\n      }, out);\n  },\n\n  _getDisjunctiveHierarchicalFacetAttribute: function(state, hierarchicalFacet, rootLevel) {\n    var separator = state._getHierarchicalFacetSeparator(hierarchicalFacet);\n    if (rootLevel === true) {\n      var rootPath = state._getHierarchicalRootPath(hierarchicalFacet);\n      var attributeIndex = 0;\n\n      if (rootPath) {\n        attributeIndex = rootPath.split(separator).length;\n      }\n      return [hierarchicalFacet.attributes[attributeIndex]];\n    }\n\n    var hierarchicalRefinement = state.getHierarchicalRefinement(hierarchicalFacet.name)[0] || '';\n    // if refinement is 'beers > IPA > Flying dog',\n    // then we want `facets: ['beers > IPA']` as disjunctive facet (parent level values)\n\n    var parentLevel = hierarchicalRefinement.split(separator).length - 1;\n    return hierarchicalFacet.attributes.slice(0, parentLevel + 1);\n  },\n\n  getSearchForFacetQuery: function(facetName, query, maxFacetHits, state) {\n    var stateForSearchForFacetValues = state.isDisjunctiveFacet(facetName) ?\n      state.clearRefinements(facetName) :\n      state;\n    var searchForFacetSearchParameters = {\n      facetQuery: query,\n      facetName: facetName\n    };\n    if (typeof maxFacetHits === 'number') {\n      searchForFacetSearchParameters.maxFacetHits = maxFacetHits;\n    }\n    return merge(\n      {},\n      requestBuilder._getHitsSearchParams(stateForSearchForFacetValues),\n      searchForFacetSearchParameters\n    );\n  }\n};\n\nmodule.exports = requestBuilder;\n"},"lineCount":322}},"error":null,"hash":"c54b83b957408a782de270d4a8b714f6","cacheData":{"env":{}}}