{"id":"node_modules/algoliasearch-helper/src/SearchParameters/RefinementList.js","dependencies":[{"name":"/Users/hugo.valla/Desktop/flagship_fashion_demo/package.json","includedInParent":true,"mtime":1610099925930},{"name":"/Users/hugo.valla/Desktop/flagship_fashion_demo/node_modules/algoliasearch-helper/package.json","includedInParent":true,"mtime":1607594689784},{"name":"../functions/defaultsPure","loc":{"line":15,"column":27},"parent":"/Users/hugo.valla/Desktop/flagship_fashion_demo/node_modules/algoliasearch-helper/src/SearchParameters/RefinementList.js","resolved":"/Users/hugo.valla/Desktop/flagship_fashion_demo/node_modules/algoliasearch-helper/src/functions/defaultsPure.js"},{"name":"../functions/omit","loc":{"line":16,"column":19},"parent":"/Users/hugo.valla/Desktop/flagship_fashion_demo/node_modules/algoliasearch-helper/src/SearchParameters/RefinementList.js","resolved":"/Users/hugo.valla/Desktop/flagship_fashion_demo/node_modules/algoliasearch-helper/src/functions/omit.js"},{"name":"../functions/objectHasKeys","loc":{"line":17,"column":28},"parent":"/Users/hugo.valla/Desktop/flagship_fashion_demo/node_modules/algoliasearch-helper/src/SearchParameters/RefinementList.js","resolved":"/Users/hugo.valla/Desktop/flagship_fashion_demo/node_modules/algoliasearch-helper/src/functions/objectHasKeys.js"}],"generated":{"js":"'use strict';\n\n/**\n * Functions to manipulate refinement lists\n *\n * The RefinementList is not formally defined through a prototype but is based\n * on a specific structure.\n *\n * @module SearchParameters.refinementList\n *\n * @typedef {string[]} SearchParameters.refinementList.Refinements\n * @typedef {Object.<string, SearchParameters.refinementList.Refinements>} SearchParameters.refinementList.RefinementList\n */\n\nvar defaultsPure = require('../functions/defaultsPure');\nvar omit = require('../functions/omit');\nvar objectHasKeys = require('../functions/objectHasKeys');\n\nvar lib = {\n  /**\n   * Adds a refinement to a RefinementList\n   * @param {RefinementList} refinementList the initial list\n   * @param {string} attribute the attribute to refine\n   * @param {string} value the value of the refinement, if the value is not a string it will be converted\n   * @return {RefinementList} a new and updated refinement list\n   */\n  addRefinement: function addRefinement(refinementList, attribute, value) {\n    if (lib.isRefined(refinementList, attribute, value)) {\n      return refinementList;\n    }\n\n    var valueAsString = '' + value;\n\n    var facetRefinement = !refinementList[attribute] ?\n      [valueAsString] :\n      refinementList[attribute].concat(valueAsString);\n\n    var mod = {};\n\n    mod[attribute] = facetRefinement;\n\n    return defaultsPure({}, mod, refinementList);\n  },\n  /**\n   * Removes refinement(s) for an attribute:\n   *  - if the value is specified removes the refinement for the value on the attribute\n   *  - if no value is specified removes all the refinements for this attribute\n   * @param {RefinementList} refinementList the initial list\n   * @param {string} attribute the attribute to refine\n   * @param {string} [value] the value of the refinement\n   * @return {RefinementList} a new and updated refinement lst\n   */\n  removeRefinement: function removeRefinement(refinementList, attribute, value) {\n    if (value === undefined) {\n      // we use the \"filter\" form of clearRefinement, since it leaves empty values as-is\n      // the form with a string will remove the attribute completely\n      return lib.clearRefinement(refinementList, function(v, f) {\n        return attribute === f;\n      });\n    }\n\n    var valueAsString = '' + value;\n\n    return lib.clearRefinement(refinementList, function(v, f) {\n      return attribute === f && valueAsString === v;\n    });\n  },\n  /**\n   * Toggles the refinement value for an attribute.\n   * @param {RefinementList} refinementList the initial list\n   * @param {string} attribute the attribute to refine\n   * @param {string} value the value of the refinement\n   * @return {RefinementList} a new and updated list\n   */\n  toggleRefinement: function toggleRefinement(refinementList, attribute, value) {\n    if (value === undefined) throw new Error('toggleRefinement should be used with a value');\n\n    if (lib.isRefined(refinementList, attribute, value)) {\n      return lib.removeRefinement(refinementList, attribute, value);\n    }\n\n    return lib.addRefinement(refinementList, attribute, value);\n  },\n  /**\n   * Clear all or parts of a RefinementList. Depending on the arguments, three\n   * kinds of behavior can happen:\n   *  - if no attribute is provided: clears the whole list\n   *  - if an attribute is provided as a string: clears the list for the specific attribute\n   *  - if an attribute is provided as a function: discards the elements for which the function returns true\n   * @param {RefinementList} refinementList the initial list\n   * @param {string} [attribute] the attribute or function to discard\n   * @param {string} [refinementType] optional parameter to give more context to the attribute function\n   * @return {RefinementList} a new and updated refinement list\n   */\n  clearRefinement: function clearRefinement(refinementList, attribute, refinementType) {\n    if (attribute === undefined) {\n      if (!objectHasKeys(refinementList)) {\n        return refinementList;\n      }\n      return {};\n    } else if (typeof attribute === 'string') {\n      return omit(refinementList, [attribute]);\n    } else if (typeof attribute === 'function') {\n      var hasChanged = false;\n\n      var newRefinementList = Object.keys(refinementList).reduce(function(memo, key) {\n        var values = refinementList[key] || [];\n        var facetList = values.filter(function(value) {\n          return !attribute(value, key, refinementType);\n        });\n\n        if (facetList.length !== values.length) {\n          hasChanged = true;\n        }\n        memo[key] = facetList;\n\n        return memo;\n      }, {});\n\n      if (hasChanged) return newRefinementList;\n      return refinementList;\n    }\n  },\n  /**\n   * Test if the refinement value is used for the attribute. If no refinement value\n   * is provided, test if the refinementList contains any refinement for the\n   * given attribute.\n   * @param {RefinementList} refinementList the list of refinement\n   * @param {string} attribute name of the attribute\n   * @param {string} [refinementValue] value of the filter/refinement\n   * @return {boolean}\n   */\n  isRefined: function isRefined(refinementList, attribute, refinementValue) {\n    var containsRefinements = !!refinementList[attribute] &&\n      refinementList[attribute].length > 0;\n\n    if (refinementValue === undefined || !containsRefinements) {\n      return containsRefinements;\n    }\n\n    var refinementValueAsString = '' + refinementValue;\n\n    return refinementList[attribute].indexOf(refinementValueAsString) !== -1;\n  }\n};\n\nmodule.exports = lib;\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/algoliasearch-helper/src/SearchParameters/RefinementList.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/algoliasearch-helper/src/SearchParameters/RefinementList.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/algoliasearch-helper/src/SearchParameters/RefinementList.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/algoliasearch-helper/src/SearchParameters/RefinementList.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/algoliasearch-helper/src/SearchParameters/RefinementList.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/algoliasearch-helper/src/SearchParameters/RefinementList.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/algoliasearch-helper/src/SearchParameters/RefinementList.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/algoliasearch-helper/src/SearchParameters/RefinementList.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/algoliasearch-helper/src/SearchParameters/RefinementList.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/algoliasearch-helper/src/SearchParameters/RefinementList.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/algoliasearch-helper/src/SearchParameters/RefinementList.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/algoliasearch-helper/src/SearchParameters/RefinementList.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/algoliasearch-helper/src/SearchParameters/RefinementList.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/algoliasearch-helper/src/SearchParameters/RefinementList.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/algoliasearch-helper/src/SearchParameters/RefinementList.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/algoliasearch-helper/src/SearchParameters/RefinementList.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/algoliasearch-helper/src/SearchParameters/RefinementList.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/algoliasearch-helper/src/SearchParameters/RefinementList.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/algoliasearch-helper/src/SearchParameters/RefinementList.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/algoliasearch-helper/src/SearchParameters/RefinementList.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/algoliasearch-helper/src/SearchParameters/RefinementList.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/algoliasearch-helper/src/SearchParameters/RefinementList.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/algoliasearch-helper/src/SearchParameters/RefinementList.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/algoliasearch-helper/src/SearchParameters/RefinementList.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/algoliasearch-helper/src/SearchParameters/RefinementList.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/algoliasearch-helper/src/SearchParameters/RefinementList.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/algoliasearch-helper/src/SearchParameters/RefinementList.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/algoliasearch-helper/src/SearchParameters/RefinementList.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/algoliasearch-helper/src/SearchParameters/RefinementList.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/algoliasearch-helper/src/SearchParameters/RefinementList.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/algoliasearch-helper/src/SearchParameters/RefinementList.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/algoliasearch-helper/src/SearchParameters/RefinementList.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/algoliasearch-helper/src/SearchParameters/RefinementList.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/algoliasearch-helper/src/SearchParameters/RefinementList.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/algoliasearch-helper/src/SearchParameters/RefinementList.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/algoliasearch-helper/src/SearchParameters/RefinementList.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/algoliasearch-helper/src/SearchParameters/RefinementList.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/algoliasearch-helper/src/SearchParameters/RefinementList.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/algoliasearch-helper/src/SearchParameters/RefinementList.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/algoliasearch-helper/src/SearchParameters/RefinementList.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/algoliasearch-helper/src/SearchParameters/RefinementList.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/algoliasearch-helper/src/SearchParameters/RefinementList.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/algoliasearch-helper/src/SearchParameters/RefinementList.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/algoliasearch-helper/src/SearchParameters/RefinementList.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/algoliasearch-helper/src/SearchParameters/RefinementList.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/algoliasearch-helper/src/SearchParameters/RefinementList.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/algoliasearch-helper/src/SearchParameters/RefinementList.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/algoliasearch-helper/src/SearchParameters/RefinementList.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/algoliasearch-helper/src/SearchParameters/RefinementList.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/algoliasearch-helper/src/SearchParameters/RefinementList.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/algoliasearch-helper/src/SearchParameters/RefinementList.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/algoliasearch-helper/src/SearchParameters/RefinementList.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/algoliasearch-helper/src/SearchParameters/RefinementList.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/algoliasearch-helper/src/SearchParameters/RefinementList.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/algoliasearch-helper/src/SearchParameters/RefinementList.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/algoliasearch-helper/src/SearchParameters/RefinementList.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/algoliasearch-helper/src/SearchParameters/RefinementList.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/algoliasearch-helper/src/SearchParameters/RefinementList.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/algoliasearch-helper/src/SearchParameters/RefinementList.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/algoliasearch-helper/src/SearchParameters/RefinementList.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/algoliasearch-helper/src/SearchParameters/RefinementList.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/algoliasearch-helper/src/SearchParameters/RefinementList.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/algoliasearch-helper/src/SearchParameters/RefinementList.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/algoliasearch-helper/src/SearchParameters/RefinementList.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/algoliasearch-helper/src/SearchParameters/RefinementList.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/algoliasearch-helper/src/SearchParameters/RefinementList.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/algoliasearch-helper/src/SearchParameters/RefinementList.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/algoliasearch-helper/src/SearchParameters/RefinementList.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/algoliasearch-helper/src/SearchParameters/RefinementList.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/algoliasearch-helper/src/SearchParameters/RefinementList.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/algoliasearch-helper/src/SearchParameters/RefinementList.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/algoliasearch-helper/src/SearchParameters/RefinementList.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/algoliasearch-helper/src/SearchParameters/RefinementList.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/algoliasearch-helper/src/SearchParameters/RefinementList.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/algoliasearch-helper/src/SearchParameters/RefinementList.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/algoliasearch-helper/src/SearchParameters/RefinementList.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/algoliasearch-helper/src/SearchParameters/RefinementList.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/algoliasearch-helper/src/SearchParameters/RefinementList.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/algoliasearch-helper/src/SearchParameters/RefinementList.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/algoliasearch-helper/src/SearchParameters/RefinementList.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/algoliasearch-helper/src/SearchParameters/RefinementList.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/algoliasearch-helper/src/SearchParameters/RefinementList.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/algoliasearch-helper/src/SearchParameters/RefinementList.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/algoliasearch-helper/src/SearchParameters/RefinementList.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/algoliasearch-helper/src/SearchParameters/RefinementList.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/algoliasearch-helper/src/SearchParameters/RefinementList.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/algoliasearch-helper/src/SearchParameters/RefinementList.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/algoliasearch-helper/src/SearchParameters/RefinementList.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/algoliasearch-helper/src/SearchParameters/RefinementList.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/algoliasearch-helper/src/SearchParameters/RefinementList.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/algoliasearch-helper/src/SearchParameters/RefinementList.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/algoliasearch-helper/src/SearchParameters/RefinementList.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/algoliasearch-helper/src/SearchParameters/RefinementList.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/algoliasearch-helper/src/SearchParameters/RefinementList.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/algoliasearch-helper/src/SearchParameters/RefinementList.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/algoliasearch-helper/src/SearchParameters/RefinementList.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/algoliasearch-helper/src/SearchParameters/RefinementList.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/algoliasearch-helper/src/SearchParameters/RefinementList.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/algoliasearch-helper/src/SearchParameters/RefinementList.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/algoliasearch-helper/src/SearchParameters/RefinementList.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/algoliasearch-helper/src/SearchParameters/RefinementList.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/algoliasearch-helper/src/SearchParameters/RefinementList.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/algoliasearch-helper/src/SearchParameters/RefinementList.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/algoliasearch-helper/src/SearchParameters/RefinementList.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/algoliasearch-helper/src/SearchParameters/RefinementList.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/algoliasearch-helper/src/SearchParameters/RefinementList.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/algoliasearch-helper/src/SearchParameters/RefinementList.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/algoliasearch-helper/src/SearchParameters/RefinementList.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/algoliasearch-helper/src/SearchParameters/RefinementList.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/algoliasearch-helper/src/SearchParameters/RefinementList.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/algoliasearch-helper/src/SearchParameters/RefinementList.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/algoliasearch-helper/src/SearchParameters/RefinementList.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/algoliasearch-helper/src/SearchParameters/RefinementList.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules/algoliasearch-helper/src/SearchParameters/RefinementList.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules/algoliasearch-helper/src/SearchParameters/RefinementList.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"node_modules/algoliasearch-helper/src/SearchParameters/RefinementList.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"node_modules/algoliasearch-helper/src/SearchParameters/RefinementList.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"node_modules/algoliasearch-helper/src/SearchParameters/RefinementList.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"node_modules/algoliasearch-helper/src/SearchParameters/RefinementList.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"node_modules/algoliasearch-helper/src/SearchParameters/RefinementList.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"node_modules/algoliasearch-helper/src/SearchParameters/RefinementList.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"node_modules/algoliasearch-helper/src/SearchParameters/RefinementList.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"node_modules/algoliasearch-helper/src/SearchParameters/RefinementList.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"node_modules/algoliasearch-helper/src/SearchParameters/RefinementList.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"node_modules/algoliasearch-helper/src/SearchParameters/RefinementList.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"node_modules/algoliasearch-helper/src/SearchParameters/RefinementList.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"node_modules/algoliasearch-helper/src/SearchParameters/RefinementList.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"node_modules/algoliasearch-helper/src/SearchParameters/RefinementList.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"node_modules/algoliasearch-helper/src/SearchParameters/RefinementList.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"node_modules/algoliasearch-helper/src/SearchParameters/RefinementList.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"node_modules/algoliasearch-helper/src/SearchParameters/RefinementList.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"node_modules/algoliasearch-helper/src/SearchParameters/RefinementList.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"node_modules/algoliasearch-helper/src/SearchParameters/RefinementList.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"node_modules/algoliasearch-helper/src/SearchParameters/RefinementList.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"node_modules/algoliasearch-helper/src/SearchParameters/RefinementList.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"node_modules/algoliasearch-helper/src/SearchParameters/RefinementList.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"node_modules/algoliasearch-helper/src/SearchParameters/RefinementList.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"node_modules/algoliasearch-helper/src/SearchParameters/RefinementList.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"node_modules/algoliasearch-helper/src/SearchParameters/RefinementList.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"node_modules/algoliasearch-helper/src/SearchParameters/RefinementList.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"node_modules/algoliasearch-helper/src/SearchParameters/RefinementList.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"node_modules/algoliasearch-helper/src/SearchParameters/RefinementList.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"node_modules/algoliasearch-helper/src/SearchParameters/RefinementList.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"node_modules/algoliasearch-helper/src/SearchParameters/RefinementList.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"node_modules/algoliasearch-helper/src/SearchParameters/RefinementList.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"node_modules/algoliasearch-helper/src/SearchParameters/RefinementList.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"node_modules/algoliasearch-helper/src/SearchParameters/RefinementList.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"node_modules/algoliasearch-helper/src/SearchParameters/RefinementList.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}}],"sources":{"node_modules/algoliasearch-helper/src/SearchParameters/RefinementList.js":"'use strict';\n\n/**\n * Functions to manipulate refinement lists\n *\n * The RefinementList is not formally defined through a prototype but is based\n * on a specific structure.\n *\n * @module SearchParameters.refinementList\n *\n * @typedef {string[]} SearchParameters.refinementList.Refinements\n * @typedef {Object.<string, SearchParameters.refinementList.Refinements>} SearchParameters.refinementList.RefinementList\n */\n\nvar defaultsPure = require('../functions/defaultsPure');\nvar omit = require('../functions/omit');\nvar objectHasKeys = require('../functions/objectHasKeys');\n\nvar lib = {\n  /**\n   * Adds a refinement to a RefinementList\n   * @param {RefinementList} refinementList the initial list\n   * @param {string} attribute the attribute to refine\n   * @param {string} value the value of the refinement, if the value is not a string it will be converted\n   * @return {RefinementList} a new and updated refinement list\n   */\n  addRefinement: function addRefinement(refinementList, attribute, value) {\n    if (lib.isRefined(refinementList, attribute, value)) {\n      return refinementList;\n    }\n\n    var valueAsString = '' + value;\n\n    var facetRefinement = !refinementList[attribute] ?\n      [valueAsString] :\n      refinementList[attribute].concat(valueAsString);\n\n    var mod = {};\n\n    mod[attribute] = facetRefinement;\n\n    return defaultsPure({}, mod, refinementList);\n  },\n  /**\n   * Removes refinement(s) for an attribute:\n   *  - if the value is specified removes the refinement for the value on the attribute\n   *  - if no value is specified removes all the refinements for this attribute\n   * @param {RefinementList} refinementList the initial list\n   * @param {string} attribute the attribute to refine\n   * @param {string} [value] the value of the refinement\n   * @return {RefinementList} a new and updated refinement lst\n   */\n  removeRefinement: function removeRefinement(refinementList, attribute, value) {\n    if (value === undefined) {\n      // we use the \"filter\" form of clearRefinement, since it leaves empty values as-is\n      // the form with a string will remove the attribute completely\n      return lib.clearRefinement(refinementList, function(v, f) {\n        return attribute === f;\n      });\n    }\n\n    var valueAsString = '' + value;\n\n    return lib.clearRefinement(refinementList, function(v, f) {\n      return attribute === f && valueAsString === v;\n    });\n  },\n  /**\n   * Toggles the refinement value for an attribute.\n   * @param {RefinementList} refinementList the initial list\n   * @param {string} attribute the attribute to refine\n   * @param {string} value the value of the refinement\n   * @return {RefinementList} a new and updated list\n   */\n  toggleRefinement: function toggleRefinement(refinementList, attribute, value) {\n    if (value === undefined) throw new Error('toggleRefinement should be used with a value');\n\n    if (lib.isRefined(refinementList, attribute, value)) {\n      return lib.removeRefinement(refinementList, attribute, value);\n    }\n\n    return lib.addRefinement(refinementList, attribute, value);\n  },\n  /**\n   * Clear all or parts of a RefinementList. Depending on the arguments, three\n   * kinds of behavior can happen:\n   *  - if no attribute is provided: clears the whole list\n   *  - if an attribute is provided as a string: clears the list for the specific attribute\n   *  - if an attribute is provided as a function: discards the elements for which the function returns true\n   * @param {RefinementList} refinementList the initial list\n   * @param {string} [attribute] the attribute or function to discard\n   * @param {string} [refinementType] optional parameter to give more context to the attribute function\n   * @return {RefinementList} a new and updated refinement list\n   */\n  clearRefinement: function clearRefinement(refinementList, attribute, refinementType) {\n    if (attribute === undefined) {\n      if (!objectHasKeys(refinementList)) {\n        return refinementList;\n      }\n      return {};\n    } else if (typeof attribute === 'string') {\n      return omit(refinementList, [attribute]);\n    } else if (typeof attribute === 'function') {\n      var hasChanged = false;\n\n      var newRefinementList = Object.keys(refinementList).reduce(function(memo, key) {\n        var values = refinementList[key] || [];\n        var facetList = values.filter(function(value) {\n          return !attribute(value, key, refinementType);\n        });\n\n        if (facetList.length !== values.length) {\n          hasChanged = true;\n        }\n        memo[key] = facetList;\n\n        return memo;\n      }, {});\n\n      if (hasChanged) return newRefinementList;\n      return refinementList;\n    }\n  },\n  /**\n   * Test if the refinement value is used for the attribute. If no refinement value\n   * is provided, test if the refinementList contains any refinement for the\n   * given attribute.\n   * @param {RefinementList} refinementList the list of refinement\n   * @param {string} attribute name of the attribute\n   * @param {string} [refinementValue] value of the filter/refinement\n   * @return {boolean}\n   */\n  isRefined: function isRefined(refinementList, attribute, refinementValue) {\n    var containsRefinements = !!refinementList[attribute] &&\n      refinementList[attribute].length > 0;\n\n    if (refinementValue === undefined || !containsRefinements) {\n      return containsRefinements;\n    }\n\n    var refinementValueAsString = '' + refinementValue;\n\n    return refinementList[attribute].indexOf(refinementValueAsString) !== -1;\n  }\n};\n\nmodule.exports = lib;\n"},"lineCount":148}},"error":null,"hash":"7403da7f73258fd944ec58c21e1f2a9d","cacheData":{"env":{}}}